/*   Classroom Automation Part 1 >>  status : Working
*    By: sstapan
*    Code will allow to enter password for verification and input time limit for attendance
*    proteus simulation file : CAuto.pdsprj
*/

char kp,kbin;
// Keypad module connections
char keypadPort at P0;

//ROM storage
const char t1[] = "Classroom", t2[] = "Automation";
const char t3[] = "Enter Pass: ", t4[] = "Access Granted", t5[] =  "Access Denied", t6[] = "Try Again";
//const char t7[] = "1.Change Pass", t8[] = "2.Class starts";
const char t9[] = "Time (mins): _ _", t10[] =  "     OK(#)", t11[] = "Continued in ano", t12[] = "ther uController" ;

char msg[17]; //declare array set to max size required plus 1 [for terminator] for copying into
char mint[2]; //store time in minutes after which class will begin

//password
unsigned char idata pass[4];

char a=0, check = 0; //check is used for try again if wrong password entered
char *d;

//declaring LCD pins
sbit LCD_RS at P2_0_bit;
sbit LCD_EN at P2_1_bit;
sbit LCD_D4 at P2_2_bit;
sbit LCD_D5 at P2_3_bit;
sbit LCD_D6 at P2_4_bit;
sbit LCD_D7 at P2_5_bit;

// reading data from ROM to RAM to be displayed on LCD
char *CopyConst2Ram(char * dest, const char * src)
{
  char * d = dest;

  for(;*dest++ = *src++;)
    ;
  return d;
}

char getkey()  //function to get keypad input
{
  Keypad_Init();                           // Initialize Keypad
  do {
    kp = 0;
         delay_ms(10);
    // Wait for key to be pressed and released
    do
      kp = Keypad_Key_Click();
    while (!kp);
   // Prepare value for output, transform key to it's ASCII value
    switch (kp) {

      case  1: kp = 49; break; // 1
      case  2: kp = 50; break; // 2
      case  3: kp = 51; break; // 3
      case  4: kp = 65; break; // A
      case  5: kp = 52; break; // 4
      case  6: kp = 53; break; // 5
      case  7: kp = 54; break; // 6
      case  8: kp = 66; break; // B
      case  9: kp = 55; break; // 7
      case 10: kp = 56; break; // 8
      case 11: kp = 57; break; // 9
      case 12: kp = 67; break; // C
      case 13: kp = 42; break; // *
      case 14: kp = 48; break; // 0
      case 15: kp = 35; break; // #
      case 16: kp = 68; break; // D
    }
    return kp;
  } while (1);
}

void pass_in()        //input password
{
      for(a=0;a<=3;a++)
      {
      kbin = getkey();
      if(kbin != '*' && kbin != '#') // don't accept '#' or '*' as input for password
      {
       pass[a]=kbin;
       Lcd_Cmd(_LCD_CURSOR_OFF);
       lcd_chr(2,(2*a)+2,pass[a]);
       }
      else a--;
     }
}

void display1()  //input time and basic LCD use
{
     char key,i;
     LCD_Init();
     LCD_Cmd(_LCD_CLEAR);
     LCD_Cmd(_LCD_CURSOR_OFF);
     Lcd_Out(1,1,CopyConst2Ram(msg,t9));
     Lcd_Out(2,1,CopyConst2Ram(msg,t10));

     for(i=1;i<3;i++) //get minute MSB and LSB
     {
     key = getkey();
     if(key >= 48 && key <= 57)
     {
                mint[2-i] = key;
                Lcd_Chr(1,14+(2*(i-1)),key);
     }
     else i--;
     }
     key = getkey();
     while(key != 35); //hold program till '#' is pressed
     Lcd_Cmd(_LCD_CLEAR);
     Lcd_Cmd(_LCD_CURSOR_OFF);
     LCD_out(1,1,CopyConst2Ram(msg,t11));
     LCD_out(2,1,CopyConst2Ram(msg,t12));
}

void password()  //function for password verification
{
     Keypad_Init();
     Lcd_Init();
     do
     {
     Lcd_Cmd(_LCD_CLEAR);
     Lcd_Cmd(_LCD_CURSOR_OFF);
     lcd_out(1,1,CopyConst2Ram(msg,t3));
     LCD_Out(2,1, " _ _ _ _  Nxt(#)");
     pass_in();
     while(kbin != '#')
     {
         kbin = getkey();
     }

     //master password to reset password
     if(pass[0]=='0' && pass[1]=='0' &&pass[2]=='0' &&pass[3]=='0' )
     {
       //reset password
       Lcd_Cmd(_LCD_CLEAR);
       LCD_Out(1,1,CopyConst2Ram(msg,t4));
       delay_ms(3000);
       Lcd_Cmd(_LCD_CLEAR);
       display1();
       check = 0;
     }

     else  // for wrong password
     {
       Lcd_Cmd(_LCD_CLEAR);
       LCD_Out(1,1,CopyConst2Ram(msg,t5));
       LCD_Out(2,1,CopyConst2Ram(msg,t6));
       delay_ms(3000);
       check = 1;
     }
     p3_0_bit=1;
     }while(check);
}

void main()
{
     LCD_Init();
     LCD_Cmd(_LCD_CLEAR);
     LCD_Cmd(_LCD_CURSOR_OFF);
     Lcd_Out(1,1,CopyConst2Ram(msg,t1));
     Lcd_Out(2,1,CopyConst2Ram(msg,t2));
     delay_ms(3000);
     password();
}
